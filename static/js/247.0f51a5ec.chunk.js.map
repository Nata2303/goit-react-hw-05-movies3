{"version":3,"file":"static/js/247.0f51a5ec.chunk.js","mappings":"8KAEMA,EAAS,mCAETC,EAAM,CACVC,kBAAkB,WAAD,wBAAE,sGAETC,EAFS,kEAE2DH,GAF3D,SAGQI,EAAAA,EAAAA,IAAUD,GAHlB,cAGTE,EAHS,yBAIRA,EAASC,MAJD,uCAMfC,QAAQC,MAAM,kCAAd,MANe,kBAOR,IAPQ,yDAAF,kDAAC,GAWlBC,aAAa,WAAD,wBAAE,WAAMC,GAAN,yFAEJP,EAFI,4DAE0DH,EAF1D,kBAE0EU,GAF1E,SAGaN,EAAAA,EAAAA,IAAUD,GAHvB,cAGJE,EAHI,yBAIHA,EAASC,MAJN,uCAMVC,QAAQC,MAAM,0BAAd,MANU,kBAOH,IAPG,yDAAF,mDAAC,GAWbG,gBAAgB,WAAD,wBAAE,WAAMC,GAAN,yFAEPT,EAFO,6CAEwCS,EAFxC,oBAE2DZ,GAF3D,SAGUI,EAAAA,EAAAA,IAAUD,GAHpB,cAGPE,EAHO,yBAINA,EAASC,MAJH,uCAMbC,QAAQC,MAAM,gCAAd,MANa,kBAON,MAPM,yDAAF,mDAAC,GAWhBK,gBAAgB,WAAD,wBAAE,WAAMD,GAAN,yFAEPT,EAFO,6CAEwCS,EAFxC,4BAEmEZ,GAFnE,SAGUI,EAAAA,EAAAA,IAAUD,GAHpB,cAGPE,EAHO,yBAINA,EAASC,MAJH,uCAMbC,QAAQC,MAAM,gCAAd,MANa,kBAON,IAPM,yDAAF,mDAAC,GAWhBM,gBAAgB,WAAD,wBAAE,WAAMF,GAAN,yFAEPT,EAFO,6CAEwCS,EAFxC,4BAEmEZ,GAFnE,SAGUI,EAAAA,EAAAA,IAAUD,GAHpB,cAGPE,EAHO,yBAINA,EAASC,MAJH,uCAMbC,QAAQC,MAAM,gCAAd,MANa,kBAON,IAPM,yDAAF,mDAAC,IAYlB,K,yGCTA,UA/Ca,WACX,IAAQI,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGACFrB,EAAAA,EAAAA,gBAAoBW,GADlB,OACfN,EADe,OAErBY,EAAQZ,EAAKW,MAFQ,2CAAH,qDAKpBK,GACD,GAAE,CAACV,IAMJ,OACE,4BAEE,eAAIW,QAPgB,WACtBH,GAAkBD,EACnB,EAKG,kBACCA,IACC,yBAGGF,EAAKO,KAAI,SAAAC,GAAK,OACb,4BACE,uBAAIA,EAAMC,OAETD,EAAME,cACL,gBACEC,IAAG,yCAAoCH,EAAME,cAC7CE,IAAKJ,EAAMC,KACXI,MAAM,SAGR,gDAVML,EAAMM,GADH,QAmBxB,C","sources":["Api.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '7f4ba582d55c3d33bf97672c5d45e075';\n\nconst Api = {\n  getTrendingMovies: async () => {\n    try {\n      const apiUrl = `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`;\n      const response = await axios.get(apiUrl);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching trending movies:', error);\n      return [];\n    }\n  },\n\n  searchMovies: async query => {\n    try {\n      const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`;\n      const response = await axios.get(apiUrl);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      return [];\n    }\n  },\n\n  getMovieDetails: async movieId => {\n    try {\n      const apiUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`;\n      const response = await axios.get(apiUrl);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      return null;\n    }\n  },\n\n  getMovieCredits: async movieId => {\n    try {\n      const apiUrl = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`;\n      const response = await axios.get(apiUrl);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie credits:', error);\n      return [];\n    }\n  },\n\n  getMovieReviews: async movieId => {\n    try {\n      const apiUrl = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`;\n      const response = await axios.get(apiUrl);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie reviews:', error);\n      return [];\n    }\n  },\n};\n\nexport default Api;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Api from '../../Api';\n// import css from '../MovieDetails/movieDetails.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isCastVisible, setIsCastVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      const data = await Api.getMovieCredits(movieId);\n      setCast(data.cast);\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  const handleCastClick = () => {\n    setIsCastVisible(!isCastVisible);\n  };\n\n  return (\n    <div>\n      {/* Collapsible Cast section */}\n      <h3 onClick={handleCastClick}>Cast</h3>\n      {isCastVisible && (\n        <div>\n          {/* <h1>Cast</h1> */}\n          {/* Display cast information */}\n          {cast.map(actor => (\n            <div key={actor.id}>\n              <p>{actor.name}</p>\n              {/* Check if actor's profile path is available before displaying the image */}\n              {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                  alt={actor.name}\n                  width=\"150\"\n                />\n              ) : (\n                <p>No photo available</p>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["apiKey","Api","getTrendingMovies","apiUrl","axios","response","data","console","error","searchMovies","query","getMovieDetails","movieId","getMovieCredits","getMovieReviews","useParams","useState","cast","setCast","isCastVisible","setIsCastVisible","useEffect","fetchMovieCast","onClick","map","actor","name","profile_path","src","alt","width","id"],"sourceRoot":""}